// Omake meta programming language compiler.
// Copyright (C) 2018  Ilmir Usmanov
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program. If not, see <http://www.gnu.org/licenses/>.

module omake.parser

import {
  omake.lexer
  std.algorithm
  std.string
}

data Module(module_str: Name?, imports: Name[], declarations: Declaration[]) {
  rule match : (Token[]) = [[Token.Module:_ <Name.match>:m]?
                            [Token.Import:_ Token.LeftBrace:_ <Name.match>*:i Token.RightBrace:_]?
                            <Declaration.match>*:d] -> `return Module(m, i, d);`
  rule sema : (this) -> void = `foreach(d; declarations) d.sema();`
}

data Name(string) {
  rule match : (Token[]) = [Token.Identifier [Token.Dot:_ Token:Identifier]*]
                         -> `return Name(result.fold!((a, b) => "%s.%s".format(a.identifier, b.identifier))(""));`
}

data Declaration = Data(Data) | Rule(Rule) {
  rule match : (Token[]) = [Token.Data:_ <Data.match>] -> `return Data(result);`
                         | [Token.Rule:_ <Rule.match>] -> `return Rule(result);`
  rule sema : (this) -> void = Data(d) -> `d.sema();`
                             | Rule(r) -> `r.sema();`
}

data Data(header: DataHeader, values: DataHeader[], methods: Rule[]) {
  rule match : (Token[]) = [Token.Data <DataHeader.match>:h
                            [Token.Equals:_ <DataHeader.match> [Token.Or:_ <DataHeader.match>]*]?:v
                            [Token.LeftBrace:_ [Token.Rule:_ <Rule.match>]* Token.RightBrace:_]?:m] -> `return Data(h, v, m);`
  rule sema : (this) -> void = `infer_match_result_type(); foreach(v; values) v.sema(); foreach(m; methods) m.sema();`
  rule infer_match_result_type : (this) -> void = `foreach(m; methods) if (m.name == "match") m.result_type = Type(header);`
}

data DataHeader(name: Name, fields: DataField[]) {
  rule match : (Token[]) = [Token.Data <Name.match>:i
                            [Token.LeftParen:_ <DataField.match>
                             [Token.Comma:_ <DataField.match>]*
                             Token.RightParen:_]?:f] -> `return DataHeader(i, f);`
  rule sema : (this) -> void = `foreach(f; fields) f.sema();`
}

data DataField(name: Name?, type: Type) {
  rule match : (Token[]) = [<Name.match>?:n Token.Colon <Type.match>:t] -> `return DataField(n, t);`
  rule sema : (this) -> void = `if (name is null) name = Name("value");`
}

data Type(Name) = Optional | Array | Normal {
  rule match : (Token[]) = [<Name.match> Token.Query:_]                          -> `return Optional(result);`
                         | [<Name.match> Token.LeftSquare:_ Token:RightSquare:_] -> `return Array(result);`
                         | [<Name.match>]                                        -> `return Normal(name);`
}

data Rule(name: Name, input_types: Type[], result_type: Type?, rule_body: RuleBody) {
  rule match : (Token[]) = [Name:n Token.Colon:_
                            [Token.LeftParen:_ [<Type.match> [Token.Comma:_ Type]*]? Token.RightParen:_]:it
                            [Token.Arrow:_ <Type.match>]:rt
                            <RuleBody.match>:rb] -> `return Rule(n, it, rt, rb);`
  rule sema : (this) -> void = `rule_body.sema();`
}

data RuleBody() = Action(string)
                | PatternMatching(RulePart[]) {
  rule match : (Token[]) = [Token.Raw] -> `return Action(result.raw)`
                         | [<RulePart.match> [Token.Or:_ <RulePart.match>]*] -> `return RuleBody(result);`
  rule sema : (this) -> void = Action(_) -> `return;`
                             | PatternMatching(parts) -> `
    string action = "return result;"
    for (int i = parts.length - 1; i >= 0; i--) {
      if (parts[i].action is null) {
        parts[i].action = action;
      } else {
        action = parts[i].action;
      }
    }`
}

data RulePart(NamedExpr, action: string?) {
  rule match : (Token[]) = [<NamedExpr.match>:p [Token.Arrow:_ Token.Raw:r]?] -> `return RulePart(p, r.raw);`
}

data NamedExpr(Repetition?, name: Name?) {
  rule match : (Token[]) = [<Repetition.match>:p [Token.Colon <Name.match>:n]?] -> `return NamedExpr(p, n);`
                         | [Token.Colon <Name.match>:n]                         -> `return NamedExpr(null, n);`
}

data Repetition(Primary) = ZeroOrOne | ZeroOrMore | OneOrMore | Primary {
  rule match : (Token[]) = [<Primary.match> Token.Query:_] -> `return ZeroOrOne(result);`
                         | [<Primary.match> Token.Star:_]  -> `return ZeroOrMore(result);`
                         | [<Primary.match> Token.Plus:_]  -> `return OneOrMore(result);`
                         | [<Primary.match>]               -> `return Primary(result);`
}

data Primary = Pattern(Pattern) | Call(Name)
             | Sequence(NamedExpr[]) | Name(Name)
             | Range(left: Literal, right: Literal)
             | Literal(Literal) | Dot | Dollar {
  rule match : (Token[]) = [Token.LeftAngle <Name.match>:n Token.RightAngle]         -> `return Call(n);`
                         | [Token.LeftSquare <NamedExpr.match>*:n Token.RightSquare] -> `return Sequence(n);`
                         | [Token.Literal:l Token.DotDot Token.Literal:r]            -> `return Range(l.literal, r.literal);`
                         | [Token.Literal]                                           -> `return Literal(result.literal);`
                         | [Token.Dot]                                               -> `return Dot;`
                         | [Token.Dollar]                                            -> `return Dollar;`
                         | [<Pattern.match>]                                         -> `return Pattern(result);`
                         | [<Name.match>]                                            -> `return Name(result);`
}

data Pattern(name: Name, subs: Pattern[]) {
  rule match : (Token[]) = [<Name.match>:n [Token.LeftParen:_ <Pattern.match> [Token.Comma:_ <Pattern.match>]*]:s
                         -> `return Pattern(n, s);`
}