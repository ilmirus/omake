// Omake meta programming language compiler.
// Copyright (C) 2018  Ilmir Usmanov
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program. If not, see <http://www.gnu.org/licenses/>.

module omake.parser

import {
  omake.lexer
}

data File(module_str: Name?, imports: Name[], declarations: Declaration[]) {
  rule match : (Token[]) -> File = match_module?:m imports*:i Declaration.match*:d -> `m, i, d`
}

rule match_module : (Token[]) -> Name = Token.Module Name.match:n -> `n`

data Name(Token.Identifier[]) {
  rule match : (Token[]) -> Name = Token.Identifier:i name_suffix*:s -> `[i] ~ s`
}

rule name_suffix : (Token[]) -> Name = Token.Dot Token.Identifier:i -> `i`

rule imports : (Token[]) -> Name[] = Token.Import Token.LeftBrace Name.match*:n Token.RightBrace -> `n`

data Declaration { match : (Token[]) -> Declaration }
= Data(Data)     { Data.match -> `result` }
| Rule(Rule)     { Rule.match -> `result` }

data Data(name: Token.Identifier, fields: DataField[], methods: DataMethod[], values: DataValue[]) {
  rule match : (Token[]) -> Data
             = Token.Data Token.Identifier:i
               Token.LeftParen match_data_fields:f Token.RightParen
               Token.RightBrace match_data_methods:m Token.RightBrace
               (Token.Equals match_data_values:v)? -> `i, f, m, v`
}

rule match_data_fields : 

match_data : (Input) -> Data
           | Token.NewLine* Token.Data Token.Identifier:i fields?:f methods?:m values?:v -> `Data(i, f, m, v)`


