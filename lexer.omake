// Omake meta programming language compiler.
// Copyright (C) 2018  Ilmir Usmanov
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program. If not, see <http://www.gnu.org/licenses/>.

module omake.lexer

import {
  omake.error
}

data Locus(row: long, column: long) {
  rule this : () -> Locus = `row = 1; column = 1;`
  rule advance : (this, c: char) -> void = `if (c == '\n') { row = 1; column++; } else row++;`
}

data Input(string, locus: Locus) {
  rule empty : (this) -> bool = `return value.empty();`
  rule front : (this) -> dchar = `return empty() ? '\0' : value.front();`
  rule popFront : (this) -> void = `if (empty()) return; locus.advance(front()); value.popFront();`
}

data Token(locus: Locus) = Colon | Equals | Whitespace | LeftParen | RightParen
                         | LeftBrace | RightBrace | Arrow | Comma | Data | Rule
                         | Module | Import | LeftSquare | RightSquare | LeftAngle
                         | RightAngle | Literal(Literal)
                         | Identifier(string) | DotDot | Dot | Or | Star | Query
                         | Plus | Raw(string) | Dollar | Error(char) {
  rule match : (Input) = [":"]                   -> `return Colon(input.locus);`
                       | ["="]                   -> `return Equals(input.locus);`
                       | [' '] | ['\t'] | ['\n'] -> `return Whitespace(input.locus);`
                       | ['(']                   -> `return LeftParen(input.locus);`
                       | [')']                   -> `return RightParen(input.locus);`
                       | ['{']                   -> `return LeftBrace(input.locus);`
                       | ['}']                   -> `return RightBrace(input.locus);`
                       | ['<']                   -> `return LeftAngle(input.locus);`
                       | ['>']                   -> `return RightAngle(input.locus);`
                       | ["->"]                  -> `return Arrow(input.locus);`
                       | [',']                   -> `return Comma(input.locus);`
                       | ["data]"                -> `return Data(input.locus);`
                       | ["rule]"                -> `return Rule(input.locus);`
                       | ["module]"              -> `return Module(input.locus);`
                       | ["import]"              -> `return Import(input.locus);`
                       | ['[']                   -> `return LeftSquare(input.locus);`
                       | [']']                   -> `return RightSquare(input.locus);`
                       | [<Literal.match>]       -> `return Literal(input.locus, result);`
                       | [<identifier>]          -> `return Identifier(input.locus, result);`
                       | [".."]                  -> `return DotDot(input.locus);`
                       | ['.']                   -> `return Dot(input.locus);`
                       | ['|']                   -> `return Or(input.locus);`
                       | ['*']                   -> `return Star(input.locus);`
                       | ['?']                   -> `return Query(input.locus);`
                       | ['+']                   -> `return Plus(input.locus);`
                       | [<raw_literal>]         -> `return Raw(input.locus, result);`
                       | ['$']                   -> `return Dollar(input.locus);`
                       | [.]                     -> `return Error(input.locus, result);`
}

data Literal = Char(char)
             | String(string)
             | Null {
  rule match : (Input) = ["'" <c_char>*:c "'"] -> `return Char(check_character_literal(c, input.locus));`
                       | ['"' <c_char>*:s '"'] -> `return String(s);`
                       | ["null"]              -> `return Null;`
}

rule scan : (Input) -> Token[] = Token*:t -> `return filter_out_whitespaces(t);`

rule filter_out_whitespaces : (Token[]) -> Token[] = (Token.Whitespace:_ .*)* -> `return check_for_errors(result);`

rule check_for_errors : (Token[])           -> Token[]
                      = [.* Token.Error:e]  -> `error("Unexpected character: '" ~ e.value ~ "', e.locus);`
                      | [.*]

rule identifier : (Input) -> string = <identifier_non_digit> <identifier_rest>*

rule identifier_non_digit : (Input) -> char = 'a' .. 'z' | 'A' .. 'Z' | '_'

rule identifier_rest : (Input) -> char = <identifier_non_digit> | '0' .. '9'

rule check_character_literal : (string, locus : Locus) -> char
                             = [. $]                   -> `return result;`
                             | [.]                     -> `error("wrong character literal: '" ~ input ~ "'", locus);`

rule c_char : (Input)  -> char
            = ['\\' .] -> `return unescape_char(result);`
            | [.]

rule unescape_char : (Input) -> char
                   = 'n'     -> `return '\n';`
                   | '\\'    -> `return '\\';`
                   | 't'     -> `return '\t';`
                   | .

rule raw_literal : (Input) -> string = ['`':_ .* '`':_]
